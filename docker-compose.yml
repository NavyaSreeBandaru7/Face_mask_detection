version: '3.8'

services:
  # Flask Backend API
  api:
    build: .
    container_name: mask_detection_api
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=false
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - API_KEY=${API_KEY}
      - CONFIDENCE_THRESHOLD=0.5
      - DATABASE_PATH=/app/data/detection_logs.db
      - MODEL_PATH=/app/models/mask_detector.h5
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mask_detection_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mask_detection_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - .:/usr/share/nginx/html
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - mask_detection_network

  # Redis for Caching (Optional)
  redis:
    image: redis:7-alpine
    container_name: mask_detection_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    networks:
      - mask_detection_network

  # PostgreSQL Database (Alternative to SQLite for production)
  postgres:
    image: postgres:15-alpine
    container_name: mask_detection_postgres
    environment:
      - POSTGRES_DB=mask_detection
      - POSTGRES_USER=maskuser
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - mask_detection_network

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: mask_detection_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - mask_detection_network

  # Grafana for Dashboards (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: mask_detection_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - mask_detection_network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  mask_detection_network:
    driver: bridge
